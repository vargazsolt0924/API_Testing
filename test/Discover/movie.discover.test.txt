const { spec } = require("pactum");
const testData = require("../../data/Discover/movie.discover.testData");

describe('Discover Movie API tests', () => {
  let discoverMovie;
  let response;

  beforeAll(async () => {
    discoverMovie = spec().get('/discover/movie');
    response = await discoverMovie.expectStatus(200).toss();
  });

  describe('When the request is successful', () => {
    it('should return status code 200', () => {
      expect(response.statusCode).toBe(200);
    });

    it('should return a valid schema', () => {
      discoverMovie.response().to.have.jsonSchema(testData.expectedSchema);
    });

    it('should return non-empty results', () => {
      expect(response.body.results.length).toBeGreaterThan(0);
    });
  });

  describe('When pagination is used', () => {
    describe('and valid pagination is provided', () => {
      it('should return corresponding results for the given page', async () => {
        const paginationCase = testData.paginationCases[0];
        const paginatedResponse = await spec().get('/discover/movie')
          .withQueryParams('page', paginationCase.query.page)
          .expectStatus(paginationCase.expectedStatus)
          .toss();

        expect(paginatedResponse.body.page).toBe(paginationCase.expectedPage);
      });
    });

    describe('and invalid pagination is provided', () => {
      it('should return HTTP 400 for invalid pagination query', async () => {
        const paginationCase = testData.paginationCases[1];
        const invalidPaginationResponse = await spec().get('/discover/movie')
          .withQueryParams('page', paginationCase.query.page)
          .expectStatus(paginationCase.expectedStatus)
          .toss();

        expect(invalidPaginationResponse.statusCode).toBe(400);
      });
    });
  });

  describe('When filtering movies by criteria', () => {
    describe('and filtering by release year (2020)', () => {
      it('should return movies released in 2020', async () => {
        const filterCase = testData.filterCases[0];
        const filteredResponse = await spec().get('/discover/movie')
          .withQueryParams('primary_release_year', filterCase.query.primary_release_year)
          .expectStatus(200)
          .toss();

        filteredResponse.body.results.forEach(movie => {
          expect(filterCase.check(movie)).toBe(true);
        });
      });
    });

    describe('and filtering by genre (Action - ID: 28)', () => {
      it('should return only action movies', async () => {
        const filterCase = testData.filterCases[1];
        const filteredResponse = await spec().get('/discover/movie')
          .withQueryParams('with_genres', filterCase.query.with_genres)
          .expectStatus(200)
          .toss();

        filteredResponse.body.results.forEach(movie => {
          expect(filterCase.check(movie)).toBe(true);
        });
      });
    });
  });

  describe('When authentication errors occur', () => {
    describe('and token is missing', () => {
      it('should return 401 status code for missing token', async () => {
        const errorCase = testData.authenticationErrorCases[0];
        const responseWithoutToken = await spec().get('/discover/movie')
          .withHeaders('Authorization', errorCase.headers.Authorization)
          .expectStatus(errorCase.expectedStatus)
          .toss();

        expect(responseWithoutToken.statusCode).toBe(401);
      });
    });

    describe('and token is invalid', () => {
      it('should return 401 status code for invalid token', async () => {
        const errorCase = testData.authenticationErrorCases[1];
        const responseWithInvalidToken = await spec().get('/discover/movie')
          .withHeaders('Authorization', errorCase.headers.Authorization)
          .expectStatus(errorCase.expectedStatus)
          .toss();

        expect(responseWithInvalidToken.statusCode).toBe(401);
      });
    });
  });
});
